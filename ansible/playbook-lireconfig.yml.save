- name: Acte 1 - essai csr1000
  # On va agir sur l'hôte csr1000 dans cet acte
  hosts: csr1000
  # Passe l'étape permettant de récupérer des informations sur
  #   l'hôte pour gagner du temps
  gather_facts: false

  # Liste des tâches associées à notre Acte
  tasks:
    - name: Récupère la configuration
      # On indique le nom du module
      cisco.ios.ios_command:
        # On indique ensuite ces paramètres
        # Liste dans https://docs.ansible.com/ansible/latest/collections/cisco/ios/ios_command_module.html
        commands: show running-config
      # Register permet de récupérer le résultat de la commande
      # et de le mettre dans la variable config
      register: config

    - name: Enregistre la configuration
      # Module pour copier des fichiers
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/copy_module.html
      copy:
        # Source : ce que l'on a récupéré dans config
        content: " {{ config.stdout[0] }}"
        # Nom du fichier, le terme entre accolade est une variable
        dest: "show_run_{{ inventory_hostname }}.txt"

    # Configurer les adresses IP des interfaces
    - name: Interface GigabitEthernet1 - IP via DHCP
      cisco.ios.ios_l3_interfaces:
        config:
         - name: GigabitEthernet1
        ipv4:
          dhcp: true

    - name: Interface GigabitEthernet2 - IP statique
      cisco.ios.ios_l3_interfaces:
        config:
         - name: GigabitEthernet2
        ipv4:
          address: 192.168.2.1
          mask: 255.255.255.0

    - name: Interface GigabitEthernet3 - IP statique
      cisco.ios.ios_l3_interfaces:
        config:
         - name: GigabitEthernet3
        ipv4:
          address: 192.168.3.1
          mask: 255.255.255.0

    - name: Interface GigabitEthernet4 - IP statique
      cisco.ios.ios_l3_interfaces:
        config:
         - name: GigabitEthernet4
        ipv4:
          address: 192.168.4.1
          mask: 255.255.255.0
  
    - name: Enregistre la configuration
